"use strict";(self.webpackChunk_microsoft_fast_site=self.webpackChunk_microsoft_fast_site||[]).push([[70438],{92705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=t(31085),o=t(71184);const i={id:"leveraging-css",title:"Leveraging CSS",sidebar_label:"Leveraging CSS",custom_edit_url:"https://github.com/microsoft/fast/edit/main/sites/website/versioned_docs/version-legacy/fast-element/leveraging-css.md",description:"Similar to HTML, FASTElement provides a css tagged template helper to allow creating and re-using CSS.",keywords:["leveraging CSS"]},l=void 0,r={id:"fast-element/leveraging-css",title:"Leveraging CSS",description:"Similar to HTML, FASTElement provides a css tagged template helper to allow creating and re-using CSS.",source:"@site/versioned_docs/version-1.x/fast-element/leveraging-css.md",sourceDirName:"fast-element",slug:"/fast-element/leveraging-css",permalink:"/docs/1.x/fast-element/leveraging-css",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/fast/edit/main/sites/website/versioned_docs/version-legacy/fast-element/leveraging-css.md",tags:[],version:"1.x",frontMatter:{id:"leveraging-css",title:"Leveraging CSS",sidebar_label:"Leveraging CSS",custom_edit_url:"https://github.com/microsoft/fast/edit/main/sites/website/versioned_docs/version-legacy/fast-element/leveraging-css.md",description:"Similar to HTML, FASTElement provides a css tagged template helper to allow creating and re-using CSS.",keywords:["leveraging CSS"]},sidebar:"docs",previous:{title:"Working with Shadow DOM",permalink:"/docs/1.x/fast-element/working-with-shadow-dom"},next:{title:"Next Steps",permalink:"/docs/1.x/fast-element/next-steps"}},a={},d=[{value:"Basic styles",id:"basic-styles",level:2},{value:"Composing styles",id:"composing-styles",level:2},{value:"Partial CSS",id:"partial-css",level:3},{value:"CSSDirective",id:"cssdirective",level:2},{value:"createCSS",id:"createcss",level:3},{value:"createBehavior",id:"createbehavior",level:3},{value:"Usage in ElementStyles",id:"usage-in-elementstyles",level:3},{value:"Shadow DOM styling",id:"shadow-dom-styling",level:2},{value:"Slotted content",id:"slotted-content",level:2},{value:"Styles and the element lifecycle",id:"styles-and-the-element-lifecycle",level:2},{value:"Hiding undefined elements",id:"hiding-undefined-elements",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"basic-styles",children:"Basic styles"}),"\n",(0,s.jsxs)(n.p,{children:["The final piece of our component story is CSS. Similar to HTML, ",(0,s.jsx)(n.code,{children:"FASTElement"})," provides a ",(0,s.jsx)(n.code,{children:"css"})," tagged template helper to allow creating and re-using CSS. Let's add some CSS for our ",(0,s.jsx)(n.code,{children:"name-tag"})," component."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Example: Adding CSS to a ",(0,s.jsx)(n.code,{children:"FASTElement"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { html, css, customElement, attr, FASTElement } from "@microsoft/fast-element";\n\nconst template = html<NameTag>`\n  <div class="header">\n    <slot name="avatar"></slot>\n    <h3>${x => x.greeting.toUpperCase()}</h3>\n    <h4>my name is</h4>\n  </div>\n\n  <div class="body">\n    <slot></slot>\n  </div>\n\n  <div class="footer"></div>\n`;\n\nconst styles = css`\n  :host {\n    display: inline-block;\n    contain: content;\n    color: white;\n    background: var(--fill-color);\n    border-radius: var(--border-radius);\n    min-width: 325px;\n    text-align: center;\n    box-shadow: 0 0 calc(var(--depth) * 1px) rgba(0,0,0,.5);\n  }\n\n  :host([hidden]) { \n    display: none;\n  }\n\n  .header {\n    margin: 16px 0;\n    position: relative;\n  }\n\n  h3 {\n    font-weight: bold;\n    font-family: \'Source Sans Pro\';\n    letter-spacing: 4px;\n    font-size: 32px;\n    margin: 0;\n    padding: 0;\n  }\n\n  h4 {\n    font-family: sans-serif;\n    font-size: 18px;\n    margin: 0;\n    padding: 0;\n  }\n\n  .body {\n    background: white;\n    color: black;\n    padding: 32px 8px;\n    font-size: 42px;\n    font-family: cursive;\n  }\n\n  .footer {\n    height: 16px;\n    background: var(--fill-color);\n    border-radius: 0 0 var(--border-radius) var(--border-radius);\n  }\n`;\n\n@customElement({\n  name: \'name-tag\',\n  template,\n  styles\n})\nexport class NameTag extends FASTElement {\n  @attr greeting: string = \'Hello\';\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Using the ",(0,s.jsx)(n.code,{children:"css"})," helper, we're able to create ",(0,s.jsx)(n.code,{children:"ElementStyles"}),". We configure this with the element through the ",(0,s.jsx)(n.code,{children:"styles"})," option of the decorator. Internally, ",(0,s.jsx)(n.code,{children:"FASTElement"})," will leverage ",(0,s.jsx)(n.a,{href:"https://wicg.github.io/construct-stylesheets/",children:"Constructable Stylesheet Objects"})," and ",(0,s.jsx)(n.code,{children:"ShadowRoot#adoptedStyleSheets"})," to efficiently re-use CSS across components. This means that even if we have 1k instances of our ",(0,s.jsx)(n.code,{children:"name-tag"})," component, they will all share a single instance of the associated styles, allowing for reduced memory allocation and improved performance. Because the styles are associated with the ",(0,s.jsx)(n.code,{children:"ShadowRoot"}),", they will also be encapsulated. This ensures that your styles don't affect other elements and other element styles don't affect your element."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["We've used ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/--*",children:"CSS Custom Properties"})," throughout our CSS as well as ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/calc",children:"CSS Calc"})," in order to enable our component to be styled in basic ways by consumers. Additionally, consider adding ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/::part",children:"CSS Shadow Parts"})," to your template, to enable even more powerful customization."]})}),"\n",(0,s.jsx)(n.h2,{id:"composing-styles",children:"Composing styles"}),"\n",(0,s.jsxs)(n.p,{children:["One of the nice features of ",(0,s.jsx)(n.code,{children:"ElementStyles"})," is that it can be composed with other styles. Imagine that we had a CSS normalize that we wanted to use in our ",(0,s.jsx)(n.code,{children:"name-tag"})," component. We could compose that into our styles like this:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example: Composing CSS Registries"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { normalize } from './normalize';\n\nconst styles = css`\n  ${normalize}\n  :host {\n    display: inline-block;\n    contain: content;\n    color: white;\n    background: var(--fill-color);\n    border-radius: var(--border-radius);\n    min-width: 325px;\n    text-align: center;\n    box-shadow: 0 0 calc(var(--depth) * 1px) rgba(0,0,0,.5);\n  }\n\n  ...\n`;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Rather than simply concatenating CSS strings, the ",(0,s.jsx)(n.code,{children:"css"})," helper understands that ",(0,s.jsx)(n.code,{children:"normalize"})," is ",(0,s.jsx)(n.code,{children:"ElementStyles"})," and is able to re-use the same Constructable StyleSheet instance as any other component that uses ",(0,s.jsx)(n.code,{children:"normalize"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["You can also pass a CSS ",(0,s.jsx)(n.code,{children:"string"})," or a ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet",children:"CSSStyleSheet"})," instance directly to the element definition, or even a mixed array of ",(0,s.jsx)(n.code,{children:"string"}),", ",(0,s.jsx)(n.code,{children:"CSSStyleSheet"}),", or ",(0,s.jsx)(n.code,{children:"ElementStyles"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"partial-css",children:"Partial CSS"}),"\n",(0,s.jsxs)(n.p,{children:["There are times when you may want to create reusable blocks of ",(0,s.jsx)(n.em,{children:"partial"})," CSS, where the abstraction is not valid CSS in and of itself, such as groups of CSS properties or a complex value. To do that, you can use the ",(0,s.jsx)(n.code,{children:"cssPartial"})," tagged template literal:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { css, cssPartial } from "@microsoft/fast-element";\n\nconst partial = cssPartial`color: red;`;\nconst styles = css`:host{ ${partial} }`;\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"cssPartial"})," can also compose all structures that ",(0,s.jsx)(n.code,{children:"css"})," can compose, providing even greater flexibility."]}),"\n",(0,s.jsx)(n.h2,{id:"cssdirective",children:"CSSDirective"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CSSDirective"})," allows binding behavior to an element via ",(0,s.jsx)(n.code,{children:"ElementStyles"}),". To create a ",(0,s.jsx)(n.code,{children:"CSSDirective"}),", import and extend ",(0,s.jsx)(n.code,{children:"CSSDirective"})," from ",(0,s.jsx)(n.code,{children:"@microsoft/fast-element"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { CSSDirective }  from "@microsoft/fast-element"\n\nclass RandomWidth extends CSSDirective {}\n'})}),"\n",(0,s.jsx)(n.p,{children:"A CSS directive has two key methods that you can leverage to add dynamic behavior via CSS:"}),"\n",(0,s.jsx)(n.h3,{id:"createcss",children:"createCSS"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CSSDirective"})," has a ",(0,s.jsx)(n.code,{children:"createCSS()"})," method that returns a string to be interpolated into an ",(0,s.jsx)(n.code,{children:"ElementStyles"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'class RandomWidth extends CSSDirective {\n  createCSS() {\n    return "width: var(--random-width);"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"createbehavior",children:"createBehavior"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"createBehavior()"})," method can be used to create a ",(0,s.jsx)(n.code,{children:"Behavior"})," that is bound to the element using the ",(0,s.jsx)(n.code,{children:"CSSDirective"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'class RandomWidth extends CSSDirective {\n  private property = "--random-width";\n  createCSS() {\n    return `width: var(${this.property});`\n  }\n\n  createBehavior() {\n    return {\n      bind(el) {\n        el.style.setProperty(this.property, Math.random() * 100)\n      }\n      unbind(el) {\n        el.style.removeProperty(this.property);\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"usage-in-elementstyles",children:"Usage in ElementStyles"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CSSDirective"})," can then be used in an ",(0,s.jsx)(n.code,{children:"ElementStyles"}),", where the CSS string from ",(0,s.jsx)(n.code,{children:"createCSS()"})," will be interpolated into the stylesheet, and the behavior returned from ",(0,s.jsx)(n.code,{children:"createBehavior()"})," will get bound to the element using the stylesheet:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const styles = css`:host {${new RandomWidth()}}`;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"shadow-dom-styling",children:"Shadow DOM styling"}),"\n",(0,s.jsxs)(n.p,{children:["You may have noticed the ",(0,s.jsx)(n.code,{children:":host"})," selector we used in our ",(0,s.jsx)(n.code,{children:"name-tag"})," styles. This selector allows us to apply styles directly to our custom element. Here are a few things to consider always configuring for your host element:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"display"})," - By default, the ",(0,s.jsx)(n.code,{children:"display"})," property of a custom element is ",(0,s.jsx)(n.code,{children:"inline"}),", so consider whether you want your element's default display behavior to be different."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"contain"})," - If your element's painting is contained within its bounds, consider setting the CSS ",(0,s.jsx)(n.code,{children:"contain"})," property to ",(0,s.jsx)(n.code,{children:"content"}),". The right containment model can positively affect your element's performance. ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/web/css/contain",children:"See the MDN docs"})," for more information on the various values of ",(0,s.jsx)(n.code,{children:"contain"})," and what they do."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"hidden"})," - In addition to a default ",(0,s.jsx)(n.code,{children:"display"})," style, add support for ",(0,s.jsx)(n.code,{children:"hidden"})," so that your default ",(0,s.jsx)(n.code,{children:"display"})," does not override this state. This can be done with ",(0,s.jsx)(n.code,{children:":host([hidden]) { display: none }"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"slotted-content",children:"Slotted content"}),"\n",(0,s.jsxs)(n.p,{children:["In addition to providing host styles, you can also provide default styles for content that gets slotted. For example, if we wanted to style all ",(0,s.jsx)(n.code,{children:"img"})," elements that were slotted into our ",(0,s.jsx)(n.code,{children:"name-tag"}),", we could do it like this:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example: Slotted Styles"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const styles = css`\n  ...\n\n  ::slotted(img) {\n    border-radius: 50%;\n    height: 64px;\n    width: 64px;\n    box-shadow: 0 0 calc(var(--depth) / 2px) rgba(0,0,0,.5);\n    position: absolute;\n    left: 16px;\n    top: -4px;\n  }\n\n  ...\n`;\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Both slotted and host styles can be overridden by the element user. Think of these as the ",(0,s.jsx)(n.em,{children:"default"})," styles that you are providing, so that your elements look and function correctly out-of-the-box."]})}),"\n",(0,s.jsx)(n.h2,{id:"styles-and-the-element-lifecycle",children:"Styles and the element lifecycle"}),"\n",(0,s.jsxs)(n.p,{children:["It is during the ",(0,s.jsx)(n.code,{children:"connectedCallback"})," phase of the Custom Element lifecycle that ",(0,s.jsx)(n.code,{children:"FASTElement"})," adds the element's styles. The styles are only added the first time the element is connected."]}),"\n",(0,s.jsxs)(n.p,{children:["In most cases, the styles that ",(0,s.jsx)(n.code,{children:"FASTElement"})," renders are determined by the ",(0,s.jsx)(n.code,{children:"styles"})," property of the Custom Element's configuration. However, you can also implement a method on your Custom Element class named ",(0,s.jsx)(n.code,{children:"resolveStyles()"})," that returns an ",(0,s.jsx)(n.code,{children:"ElementStyles"})," instance. If this method is present, it will be called during ",(0,s.jsx)(n.code,{children:"connectedCallback"})," to obtain the styles to use. This allows the element author to dynamically select completely different styles based on the state of the element at the time of connection."]}),"\n",(0,s.jsxs)(n.p,{children:["In addition to dynamic style selection during the ",(0,s.jsx)(n.code,{children:"connectedCallback"}),", the ",(0,s.jsx)(n.code,{children:"$fastController"})," property of ",(0,s.jsx)(n.code,{children:"FASTElement"})," enables dynamically changing the styles at any time through setting the controller's ",(0,s.jsx)(n.code,{children:"styles"})," property to any valid styles."]}),"\n",(0,s.jsx)(n.h3,{id:"hiding-undefined-elements",children:"Hiding undefined elements"}),"\n",(0,s.jsxs)(n.p,{children:["Custom Elements that have not been ",(0,s.jsx)(n.a,{href:"https://developers.google.com/web/fundamentals/web-components/customelements#upgrades",children:"upgraded"})," and don't have styles attached can still be rendered by the browser but they likely do not look how they are supposed to. To avoid a ",(0,s.jsx)(n.em,{children:"flash of un-styled content"})," (FOUC), visually hide Custom Elements if they have not been ",(0,s.jsx)(n.em,{children:"defined"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-CSS",children:":not(:defined) {\n  visibility: hidden;\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"important",children:(0,s.jsx)(n.p,{children:"The consuming application must apply this, as the components themselves do not."})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(14041);const o={},i=s.createContext(o);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);