"use strict";(self.webpackChunk_microsoft_fast_site=self.webpackChunk_microsoft_fast_site||[]).push([[89958],{64912:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(31085),c=t(71184);const o={id:"dependency-injection",title:"Dependency Injection",sidebar_label:"Dependency Injection",custom_edit_url:"https://github.com/microsoft/fast/edit/main/sites/website/src/docs/apps-and-experiences/dependency-injection.md",description:"FAST introduces the concept of a dependency injection container.",keywords:["dependency injection","container","createContainer","getOrSetDOMContainer"]},s=void 0,r={id:"advanced/dependency-injection",title:"Dependency Injection",description:"FAST introduces the concept of a dependency injection container.",source:"@site/docs/advanced/dependency-injection.md",sourceDirName:"advanced",slug:"/advanced/dependency-injection",permalink:"/docs/advanced/dependency-injection",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/fast/edit/main/sites/website/src/docs/apps-and-experiences/dependency-injection.md",tags:[],version:"current",frontMatter:{id:"dependency-injection",title:"Dependency Injection",sidebar_label:"Dependency Injection",custom_edit_url:"https://github.com/microsoft/fast/edit/main/sites/website/src/docs/apps-and-experiences/dependency-injection.md",description:"FAST introduces the concept of a dependency injection container.",keywords:["dependency injection","container","createContainer","getOrSetDOMContainer"]},sidebar:"docs",previous:{title:"Working without Decorators",permalink:"/docs/advanced/working-without-decorators"},next:{title:"API Reference",permalink:"/docs/category/api-reference"}},a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Using Dependency Injection with Web Components",id:"using-dependency-injection-with-web-components",level:3},{value:"Register Dependencies Before Defining Web Components",id:"register-dependencies-before-defining-web-components",level:4},{value:"Use <code>getOrCreateDOMContainer()</code>",id:"use-getorcreatedomcontainer",level:4},{value:"Access Dependencies in the <code>connectedCallback</code>",id:"access-dependencies-in-the-connectedcallback",level:4}];function l(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["Dependency injection is a flexible & modular design pattern for passing functionality to the parts of an app that need it. If you need your project to be more maintainable and testable, this might be a good solution for you to use. The ",(0,i.jsx)(n.code,{children:"@microsoft/fast-element"})," package has dependency injection utilities for regular use in JavaScript, and for injecting dependencies into web components."]}),"\n",(0,i.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,i.jsxs)(n.p,{children:["The first step to dependency injection is the creation of a container, this is where dependencies will be injected and resolved. There are two available ways to create a container, you can either use ",(0,i.jsx)(n.code,{children:"createContainer()"})," or ",(0,i.jsx)(n.code,{children:"getOrCreateDOMContainer()"}),". You can have as many containers as you like, however they will only resolve dependencies registered within their container."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { DI } from "@microsoft/fast-element/di.js";\n\nconst container = DI.createContainer();\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now that your container is created, let's create a few dependencies to host from it."}),"\n",(0,i.jsxs)(n.p,{children:["First let's define an interface for the dependency which we'll call ",(0,i.jsx)(n.code,{children:"MyServiceConfig"}),", and create a ",(0,i.jsx)(n.code,{children:"ContextDecorator"})," of the same name which will take the interface as it's generic type:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { DI } from "@microsoft/fast-element/di.js";\n\nexport interface MyServiceConfig {\n    get: () => Promise<Response>;\n}\n\nexport const MyServiceConfig = DI.createContext();\n'})}),"\n",(0,i.jsx)(n.p,{children:"Next let's define our implementation of the service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export class MyService implements MyServiceConfig {\n    private serviceUrl: string = "http://localhost:7776";\n\n    async get(): Promise<Response> {\n        return await fetch(this.serviceUrl, { method: "GET" });\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now that we have our service defined, let's add it as a dependency to our application ",(0,i.jsx)(n.code,{children:"App"})," class. Note the use of the ",(0,i.jsx)(n.code,{children:"ContextDecorator"})," injected into the constructor as ",(0,i.jsx)(n.code,{children:"@MyServiceConfig"}),". This will attach it to the instance with the same name."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export class App implements AppConfig {\n    constructor(\n        @MyServiceConfig private readonly myService: MyServiceConfig\n    ) {\n        return;\n    }\n\n    public async getMyServiceStatus(): Promise<number> {\n        return (await this.myService.get()).status;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Finally, let's update our container by registering ",(0,i.jsx)(n.code,{children:"MyService"})," with the dependency injection container. We will use the ",(0,i.jsx)(n.code,{children:"MyServiceConfig"})," as the key, this will allow ",(0,i.jsx)(n.code,{children:"App"})," to resolve the dependency. Note the use of ",(0,i.jsx)(n.code,{children:"transient"}),", this is a utility for creating an instance each time the service is fetched. Other utilities are available, refer to the ",(0,i.jsx)(n.code,{children:"di"})," API documentation for details."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { DI, Registration } from "@microsoft/fast-element/di.js";\n\nconst { transient } = Registration;\n\nconst container = DI.createContainer();\n\ncontainer.register(transient(MyServiceConfig, MyService));\n\nconst responseStatus = await container.get(App).getMyServiceStatus();\n\nconsole.log("Server Status:", responseStatus);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-dependency-injection-with-web-components",children:"Using Dependency Injection with Web Components"}),"\n",(0,i.jsx)(n.h4,{id:"register-dependencies-before-defining-web-components",children:"Register Dependencies Before Defining Web Components"}),"\n",(0,i.jsxs)(n.p,{children:["When using dependency injection with web components, ensure you define your container ",(0,i.jsx)(n.strong,{children:"before"})," you define your web components. Otherwise your web components may be initialized before the dependencies can be resolved."]}),"\n",(0,i.jsxs)(n.h4,{id:"use-getorcreatedomcontainer",children:["Use ",(0,i.jsx)(n.code,{children:"getOrCreateDOMContainer()"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"getOrCreateDOMContainer()"})," must be used for web components to resolve dependencies. Pass in a node to create the container for, in this example we will use ",(0,i.jsx)(n.code,{children:"document.body"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { DI, Registration } from "@microsoft/fast-element/di.js";\n\nconst { transient } = Registration;\n\nconst container = DI.getOrCreateDOMContainer(document.body);\n\ncontainer.register(transient(MyServiceConfig, MyService));\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"access-dependencies-in-the-connectedcallback",children:["Access Dependencies in the ",(0,i.jsx)(n.code,{children:"connectedCallback"})]}),"\n",(0,i.jsxs)(n.p,{children:["Once the web component has reached the ",(0,i.jsx)(n.code,{children:"connectedCallback"})," hook, you will be able to access any injected dependencies."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { FASTElement, html, observable } from "@microsoft/fast-element";\n\nexport class MyComponent extends FASTElement {\n    @MyServiceConfig myService!: MyServiceConfig;\n\n    @observable\n    status: number;\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.myService.get().then((value: Response) => {\n            this.status = value.status;\n        });\n    }\n}\n\nMyComponent.define({\n    name: "my-component",\n    template: html`<div>${x => x.status}</div>`\n});\n'})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(14041);const c={},o=i.createContext(c);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);