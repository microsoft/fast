"use strict";(self.webpackChunk_microsoft_fast_site=self.webpackChunk_microsoft_fast_site||[]).push([[84526],{11642:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=a(31085),o=a(71184);const r={id:"fast-foundation.lazy",title:"lazy variable",hide_title:!0},i=void 0,s={id:"api/fast-foundation.lazy",title:"lazy variable",description:"@microsoft/fast-foundation &gt; lazy",source:"@site/versioned_docs/version-1.x/api/fast-foundation.lazy.md",sourceDirName:"api",slug:"/api/fast-foundation.lazy",permalink:"/docs/1.x/api/fast-foundation.lazy",draft:!1,unlisted:!1,tags:[],version:"1.x",frontMatter:{id:"fast-foundation.lazy",title:"lazy variable",hide_title:!0}},l={},c=[{value:"lazy variable",id:"lazy-variable",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/1.x/api/fast-foundation",children:"@microsoft/fast-foundation"})," > ",(0,t.jsx)(n.a,{href:"/docs/1.x/api/fast-foundation.lazy",children:"lazy"})]}),"\n",(0,t.jsx)(n.h2,{id:"lazy-variable",children:"lazy variable"}),"\n",(0,t.jsxs)(n.p,{children:["A decorator that lazily injects a dependency depending on whether the ",(0,t.jsx)(n.code,{children:"Key"})," is present at the time of function call."]}),"\n",(0,t.jsx)("b",{children:"Signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"lazy: (key: any) => any\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example-1",children:"Example 1"}),"\n",(0,t.jsx)(n.p,{children:"You need to make your argument a function that returns the type, for example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class Foo {\n  constructor( @lazy('random') public random: () => number )\n}\nconst foo = container.get(Foo); // instanceof Foo\nfoo.random(); // throws\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["would throw an exception because you haven't registered ",(0,t.jsx)(n.code,{children:"'random'"})," before calling the method."]}),"\n",(0,t.jsx)(n.h2,{id:"example-2",children:"Example 2"}),"\n",(0,t.jsx)(n.p,{children:"This, would give you a new 'Math.random()' number each time."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"class Foo {\n  constructor( @lazy('random') public random: () => random )\n}\ncontainer.register(Registration.callback('random', Math.random ));\ncontainer.get(Foo).random(); // some random number\ncontainer.get(Foo).random(); // another random number\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"@lazy"})," does not manage the lifecycle of the underlying key. If you want a singleton, you have to register as a ",(0,t.jsx)(n.code,{children:"singleton"}),", ",(0,t.jsx)(n.code,{children:"transient"})," would also behave as you would expect, providing you a new instance each time."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},71184:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var t=a(14041);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);