"use strict";(self.webpackChunk_microsoft_fast_site=self.webpackChunk_microsoft_fast_site||[]).push([[76229],{48179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var i=t(31085),s=t(71184);const r={id:"html-directives",title:"HTML Directives",sidebar_label:"HTML Directives",keywords:["ref","slotted","children","when","repeat","directives","web components"]},l="HTML Directives",o={id:"getting-started/html-directives",title:"HTML Directives",description:"FAST provides directives to aide in solving some common scenarios.",source:"@site/docs/getting-started/html-directives.md",sourceDirName:"getting-started",slug:"/getting-started/html-directives",permalink:"/docs/getting-started/html-directives",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"html-directives",title:"HTML Directives",sidebar_label:"HTML Directives",keywords:["ref","slotted","children","when","repeat","directives","web components"]},sidebar:"docs",previous:{title:"HTML Templates",permalink:"/docs/getting-started/html-templates"},next:{title:"CSS Templates",permalink:"/docs/getting-started/css-templates"}},d={},a=[{value:"ref",id:"ref",level:2},{value:"slotted",id:"slotted",level:2},{value:"children",id:"children",level:2},{value:"when",id:"when",level:2},{value:"repeat",id:"repeat",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"html-directives",children:"HTML Directives"}),"\n",(0,i.jsx)(n.p,{children:"FAST provides directives to aide in solving some common scenarios."}),"\n",(0,i.jsx)(n.h2,{id:"ref",children:"ref"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes you need a direct reference to a single DOM node from your template. This might be because you need the rendered dimensions of the node, you want to control the playback of a ",(0,i.jsx)(n.code,{children:"video"})," element, use the drawing context of a ",(0,i.jsx)(n.code,{children:"canvas"})," element, or pass an element to a 3rd party library. Whatever the reason, you can get a reference to the DOM node by using the ",(0,i.jsx)(n.code,{children:"ref"})," directive."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Referencing an Element"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { FASTElement, attr, html, ref } from '@microsoft/fast-element';\n\nconst template = html<MP4Player>`\n  <video ${ref('video')}>\n    <source src=${x => x.src} type=\"video/mp4\">\n  </video>\n`;\n\nexport class MP4Player extends FASTElement {\n  @attr\n  src: string;\n\n  video: HTMLVideoElement;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.video.play();\n  }\n}\n\nMP4Player.define({\n  name: \"mp4-player\",\n  template\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Place the ",(0,i.jsx)(n.code,{children:"ref"})," directive on the element you want to reference and provide it with a property name to assign the reference to. Once the ",(0,i.jsx)(n.code,{children:"connectedCallback"})," lifecycle event runs, your property will be set to the reference, ready for use."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"If you provide a type for your HTML template, TypeScript will type check the property name you provide to ensure that it actually exists on your element."})}),"\n",(0,i.jsx)(n.h2,{id:"slotted",children:"slotted"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes you may want references to all nodes that are assigned to a particular slot. To accomplish this, use the ",(0,i.jsx)(n.code,{children:"slotted"})," directive. (For more on slots, see ",(0,i.jsx)(n.a,{href:"/docs/advanced/working-with-custom-elements",children:"Working with Shadow DOM"}),".)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { FASTElement, html, slotted } from '@microsoft/fast-element';\n\nconst template = html<MyElement>`\n  <div>\n    <slot ${slotted('slottedNodes')}></slot>\n  </div>\n`;\n\nexport class MyElement extends FASTElement {\n  @observable\n  slottedNodes: Node[];\n\n  slottedNodesChanged() {\n    // respond to changes in slotted node\n  }\n}\nMyElement.define({\n  name: 'my-element',\n  template\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Similar to the ",(0,i.jsx)(n.code,{children:"children"})," directive, the ",(0,i.jsx)(n.code,{children:"slotted"})," directive will populate the ",(0,i.jsx)(n.code,{children:"slottedNodes"})," property with nodes assigned to the slot. If ",(0,i.jsx)(n.code,{children:"slottedNodes"})," is decorated with ",(0,i.jsx)(n.code,{children:"@observable"})," then it will be updated dynamically as the assigned nodes change. Like any observable, you can optionally implement a ",(0,i.jsx)(n.em,{children:"propertyName"}),"Changed method to be notified when the nodes change. Additionally, you can provide an ",(0,i.jsx)(n.code,{children:"options"})," object to the ",(0,i.jsx)(n.code,{children:"slotted"})," directive to specify a customized configuration for the underlying ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes",children:"assignedNodes() API call"})," or specify a ",(0,i.jsx)(n.code,{children:"filter"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["It's best to leverage a change handler for slotted nodes rather than assuming that the nodes will be present in the ",(0,i.jsx)(n.code,{children:"connectedCallback"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"children",children:"children"}),"\n",(0,i.jsxs)(n.p,{children:["Besides using ",(0,i.jsx)(n.code,{children:"ref"})," to reference a single DOM node, you can use ",(0,i.jsx)(n.code,{children:"children"})," to get references to all child nodes of a particular element."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Referencing Child Nodes"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { FASTElement, html, children, repeat } from '@microsoft/fast-element';\n\nconst template = html<FriendList>`\n  <ul ${children('listItems')}>\n    ${repeat(x => x.friends, html<string>`\n      <li>${x => x}</li>\n    `)}\n  </ul>\n`;\n\nexport class FriendList extends FASTElement {\n  @observable\n  listItems: Node[];\n\n  @observable\n  friends: string[] = [];\n\n  connectedCallback() {\n    super.connectedCallback();\n    console.log(this.listItems);\n  }\n}\n\nFriendList.define({\n  name: 'friend-list',\n  template\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, the ",(0,i.jsx)(n.code,{children:"listItems"})," property will be populated with all child nodes of the ",(0,i.jsx)(n.code,{children:"ul"})," element. If ",(0,i.jsx)(n.code,{children:"listItems"})," is decorated with ",(0,i.jsx)(n.code,{children:"@observable"})," then it will be updated dynamically as the child nodes change. Like any observable, you can optionally implement a ",(0,i.jsx)(n.em,{children:"propertyName"}),"Changed method to be notified when the nodes change. Additionally, you can provide an ",(0,i.jsx)(n.code,{children:"options"})," object to the ",(0,i.jsx)(n.code,{children:"children"})," directive to specify a customized configuration for the underlying ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver",children:"MutationObserver"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsxs)(n.p,{children:["Like ",(0,i.jsx)(n.code,{children:"ref"}),", the child nodes are not available until the ",(0,i.jsx)(n.code,{children:"connectedCallback"})," lifecycle event."]})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Using the ",(0,i.jsx)(n.code,{children:"children"})," directive on the ",(0,i.jsx)(n.code,{children:"template"})," element will provide you with references to all Light DOM child nodes of your custom element, regardless of if or where they are slotted."]})}),"\n",(0,i.jsxs)(n.p,{children:["You can also provide a ",(0,i.jsx)(n.code,{children:"filter"})," function to control which child nodes are synchronized to your property. As a convenience, we provide an ",(0,i.jsx)(n.code,{children:"elements"})," filter that lets you optionally specify a selector. Taking the above example, if we wanted to ensure that our ",(0,i.jsx)(n.code,{children:"listItems"})," array only included ",(0,i.jsx)(n.code,{children:"li"})," elements (and not any text nodes or other potential child nodes), we could author our template like this:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: HTML Template with Filtering Child Nodes"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const template = html<FriendList>`\n  <ul ${children({ property: 'listItems', filter: elements('li') })}>\n    ${repeat(x => x.friends, html<string>`\n      <li>${x => x}</li>\n    `)}\n  </ul>\n`;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If using the ",(0,i.jsx)(n.code,{children:"subtree"})," option for ",(0,i.jsx)(n.code,{children:"children"})," then a ",(0,i.jsx)(n.code,{children:"selector"})," is ",(0,i.jsx)(n.em,{children:"required"})," in place of a ",(0,i.jsx)(n.code,{children:"filter"}),". This enables more efficient collection of the desired nodes in the presence of a potential large node quantity throughout the subtree."]}),"\n",(0,i.jsx)(n.h2,{id:"when",children:"when"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Use sparingly, this will have impacts on performance. If you find yourself using this directive a lot in a single component, consider creating multiple components instead."})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"when"})," directive enables you to conditionally render blocks of HTML. When you provide an expression to ",(0,i.jsx)(n.code,{children:"when"})," it will render the child template into the DOM when the expression evaluates to ",(0,i.jsx)(n.code,{children:"true"})," and remove the child template when it evaluates to ",(0,i.jsx)(n.code,{children:"false"})," (or if it is never ",(0,i.jsx)(n.code,{children:"true"}),", the rendering will be skipped entirely)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Conditional Rendering"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { FASTElement, observable, html, when } from '@microsoft/fast-element';\n\nconst template = html<MyApp>`\n  <h1>My App</h1>\n\n  ${when(x => !x.ready, html<MyApp>`\n    Loading...\n  `)}\n`;\n\nexport class MyApp extends FASTElement {\n  @observable\n  ready: boolean = false;\n\n  @observable\n  data: any = null;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.loadData();\n  }\n\n  async loadData() {\n    const response = await fetch('some/resource');\n    const data = await response.json();\n    \n    this.data = data;\n    this.ready = true;\n  }\n}\n\nMyApp.define({\n  name: 'my-app',\n  template\n});\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@observable"})," decorator creates a property that the template system can watch for changes. It is similar to ",(0,i.jsx)(n.code,{children:"@attr"}),", but the property is not surfaced as an HTML attribute on the element itself."]})}),"\n",(0,i.jsx)(n.p,{children:"In addition to providing a template to conditionally render, you can also provide an expression that evaluates to a template. This enables you to dynamically change what you are conditionally rendering."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: HTML Template with Conditional Rendering and Dynamic Template"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const template = html<MyApp>`\n  <h1>My App</h1>\n\n  ${when(x => x.ready, x => x.dataTemplate)}\n`;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"repeat",children:"repeat"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Use sparingly, this will have impacts on performance. Instead, use slots and compose your component using multiple nested elements, slotted elements may provide more performant and more maintainable solutions. See the ",(0,i.jsx)(n.a,{href:"/docs/getting-started/fast-element",children:"FASTElement documentation"})," for details."]})}),"\n",(0,i.jsxs)(n.p,{children:["To render a list of data, use the ",(0,i.jsx)(n.code,{children:"repeat"})," directive, providing the list to render and a template to use in rendering each item."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: List Rendering"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { FASTElement, observable, html, repeat } from \'@microsoft/fast-element\';\n\nconst template = html<FriendList>`\n  <h1>Friends</h1>\n\n  <form @submit="${x => x.addFriend()}>"\n    <input type="text" :value="${x => x.name}" @input="${(x, c) => x.handleNameInput(c.event)}">\n    <button type="submit">Add Friend</button>\n  </form>\n  <ul>\n    ${repeat(x => x.friends, html<string>`\n      <li>${x => x}</li>\n    `)}\n  </ul>\n`;\n\nexport class FriendList extends FASTElement {\n  @observable\n  friends: string[] = [];\n\n  @observable\n  name: string = \'\';\n\n  addFriend() {\n    if (!this.name) {\n      return;\n    }\n\n    this.friends.push(this.name);\n    this.name = \'\';\n  }\n\n  handleNameInput(event: Event) {\n    this.name = (event.target! as HTMLInputElement).value;\n  }\n}\n\nFriendList.define({\n  name: \'friend-list\',\n  template\n})\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Similar to event handlers, within a ",(0,i.jsx)(n.code,{children:"repeat"})," block you have access to a special context object. Here is a list of the properties that are available on the context:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"event"})," - The event object when inside an event handler."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parent"})," - The parent view-model when inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parentContext"})," - The parent ",(0,i.jsx)(n.code,{children:"ExecutionContext"})," when inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block. This is useful when repeats are nested and the inner-most repeat needs access to the root view-model."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"index"})," - The index of the current item when inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block (opt-in)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"length"})," - The length of the array when inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block (opt-in)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isEven"})," - True if the index of the current item is even when inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block (opt-in)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isOdd"})," - True if the index of the current item is odd when inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block (opt-in)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isFirst"})," - True if the current item is first in the array inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block (opt-in)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isInMiddle"})," - True if the current item is somewhere in the middle of the array inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block (opt-in)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isLast"})," - True if the current item is last in the array inside a ",(0,i.jsx)(n.code,{children:"repeat"})," block (opt-in)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Some context properties are opt-in because they are more costly to update. So, for performance reasons, they are not available by default. To opt into the positioning properties, pass options to the repeat directive, with the setting ",(0,i.jsx)(n.code,{children:"positioning: true"}),". For example, here's how we would use the ",(0,i.jsx)(n.code,{children:"index"})," in our friends template from above:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: HTMLTemplate with List Rendering and Item Index"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const template = html<FriendList>`\n  <ul>\n    ${repeat(x => x.friends, html<string>`\n      <li>${(x, c) => c.index} ${x => x}</li>\n    `, { positioning: true })}\n  </ul>\n`;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Whether or not a repeat directive re-uses item views can be controlled with the ",(0,i.jsx)(n.code,{children:"recycle"})," option setting. When ",(0,i.jsx)(n.code,{children:"recycle: true"}),", which is the default value, the repeat directive may reuse views rather than create new ones from the template.  When ",(0,i.jsx)(n.code,{children:"recycle: false"}),'\npreviously used views are always discarded and each item will always be assigned a new view. Recyling previously used views may improve performance in some situations but may also be "dirty" from the previously displayed item.']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: HTML Template with List Rendering and without view recycling"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const template = html<FriendList>`\n  <ul>\n    ${repeat(\n      x => x.friends,\n      html<string>`<li>${(x, c) => c.index} ${x => x}</li>`,\n      { positioning: true, recycle: false }\n    )}\n  </ul>\n`;\n"})}),"\n",(0,i.jsx)(n.p,{children:"In addition to providing a template to render the items with, you can also provide an expression that evaluates to a template. This enables you to dynamically change what you are using to render the items."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(14041);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);